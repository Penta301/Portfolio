{"ast":null,"code":"import _construct from\"/home/juanemilio/Desktop/Portfolio_1/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";import _toConsumableArray from\"/home/juanemilio/Desktop/Portfolio_1/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";function FilterLogic(){var cleanData=function cleanData(data){var list=[];var filteredData=data.map(function(item){item.technologies.map(function(type){return list.push(type);});return list;});var cleanedData=_toConsumableArray(_construct(Set,_toConsumableArray(filteredData)));return cleanedData;};var filterCategories=function filterCategories(data,category){var newItems=data.filter(function(item){return item.technologies.includes(category);});return newItems;};return{cleanData:cleanData,filterCategories:filterCategories};}export default FilterLogic;","map":{"version":3,"sources":["/home/juanemilio/Desktop/Portfolio_1/Portfolio/frontend/src/helpers/Filter/FilterLogic.js"],"names":["FilterLogic","cleanData","data","list","filteredData","map","item","technologies","type","push","cleanedData","Set","filterCategories","category","newItems","filter","includes"],"mappings":"4VAAA,QAASA,CAAAA,WAAT,EAAuB,CACrB,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,IAAD,CAAU,CAC1B,GAAMC,CAAAA,IAAI,CAAG,EAAb,CACA,GAAMC,CAAAA,YAAY,CAAGF,IAAI,CAACG,GAAL,CAAS,SAACC,IAAD,CAAU,CACtCA,IAAI,CAACC,YAAL,CAAkBF,GAAlB,CAAsB,SAACG,IAAD,QAAUL,CAAAA,IAAI,CAACM,IAAL,CAAUD,IAAV,CAAV,EAAtB,EACA,MAAOL,CAAAA,IAAP,CACD,CAHoB,CAArB,CAKA,GAAMO,CAAAA,WAAW,+BAAWC,GAAX,oBAAkBP,YAAlB,GAAjB,CAEA,MAAOM,CAAAA,WAAP,CACD,CAVD,CAYA,GAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACV,IAAD,CAAOW,QAAP,CAAoB,CAC3C,GAAMC,CAAAA,QAAQ,CAAGZ,IAAI,CAACa,MAAL,CAAY,SAACT,IAAD,QAC3BA,CAAAA,IAAI,CAACC,YAAL,CAAkBS,QAAlB,CAA2BH,QAA3B,CAD2B,EAAZ,CAAjB,CAGA,MAAOC,CAAAA,QAAP,CACD,CALD,CAOA,MAAO,CACLb,SAAS,CAATA,SADK,CAELW,gBAAgB,CAAhBA,gBAFK,CAAP,CAID,CAED,cAAeZ,CAAAA,WAAf","sourcesContent":["function FilterLogic() {\n  const cleanData = (data) => {\n    const list = [];\n    const filteredData = data.map((item) => {\n      item.technologies.map((type) => list.push(type));\n      return list;\n    });\n\n    const cleanedData = [...new Set(...filteredData)];\n\n    return cleanedData;\n  };\n\n  const filterCategories = (data, category) => {\n    const newItems = data.filter((item) =>\n      item.technologies.includes(category)\n    );\n    return newItems;\n  };\n\n  return {\n    cleanData,\n    filterCategories,\n  };\n}\n\nexport default FilterLogic;\n"]},"metadata":{},"sourceType":"module"}